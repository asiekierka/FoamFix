buildscript {
	repositories {
		jcenter()
		maven { url = "http://files.minecraftforge.net/maven" }
		maven {
			url = "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
		classpath "gradle.plugin.net.minecrell:licenser:0.3"
	}
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.minecrell.licenser'

version = "0.9.3-1.12.2"
group= "pl.asie.foamfix" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "foamfix"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    version = "1.12.2-14.23.2.2611"
    runDir = "run"
    mappings = "snapshot_20180214"

    replace '@VERSION@', project.version
}

repositories {
	mavenCentral()
}

license {
	sourceSets = [project.sourceSets.main]
	header = project.file("docs/licenses/COPYING")
	ignoreFailures = true
	exclude '**/*.lang'
	exclude '**/*.info'
	exclude '**/*.mcmeta'

	matching('**/pl/asie/foamfix/api/**') {
		header = project.file("docs/licenses/LICENSE-API")
	}
}

configurations {
	shadow
	compile.extendsFrom shadow
}

repositories {
	maven {
		name = 'DVS1 Maven FS'
		url = 'http://dvs1.progwml6.com/files/maven'
	}
}

dependencies {
	deobfCompile "mezz.jei:jei_1.12.2:4.8.5.151"
	compile "org.openjdk.jmh:jmh-generator-annprocess:1.20"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar.dependsOn shadowJar
jar.enabled = false

shadowJar {
    archiveName = tasks.jar.archiveName
    configurations = [project.configurations.shadow]
}

reobfJar {
	setJar(tasks.shadowJar.archivePath)
}
reobfJar.dependsOn shadowJar

task anarchyJar(type: Jar, dependsOn: classes) {
    from(sourceSets.main.output)
    exclude("META-INF/BenchmarkList")
    exclude("META-INF/CompilerHints")
    exclude("assets/foamfix/flamingo.png")
    exclude("pl/asie/foamfix/client/dolphin")
    exclude("pl/asie/foamfix/tests")
    manifest.attributes "Manifest-Version": "1.0"
    manifest.attributes "FMLCorePluginContainsFMLMod": "true"
    manifest.attributes "FMLCorePlugin": "pl.asie.foamfix.coremod.FoamFixCore"
    archiveName = (archiveName - ".jar") + "-anarchy.jar"
}

task lawfulJar(type: Jar, dependsOn: classes) {
    from(sourceSets.main.output)
    exclude("META-INF/BenchmarkList")
    exclude("META-INF/CompilerHints")
    exclude("assets/foamfix/flamingo.png")
    exclude("pl/asie/foamfix/client/dolphin")
    exclude("pl/asie/foamfix/tests")

    exclude("pl/asie/foamfix/coremod")
    exclude("pl/asie/patchy")

    archiveName = (archiveName - ".jar") + "-law.jar"
}

reobf {
    anarchyJar { mappingType = 'SEARGE' }
    lawfulJar { mappingType = 'SEARGE' }
}

assemble.dependsOn(anarchyJar, lawfulJar)

task signLawfulJar(type: SignJar, dependsOn: lawfulJar) {
    onlyIf {
        project.hasProperty('keyStore')
    }

    keyStore = project.keyStore
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = lawfulJar.archivePath
    outputFile = lawfulJar.archivePath
}

task signAnarchyJar(type: SignJar, dependsOn: anarchyJar) {
    onlyIf {
        project.hasProperty('keyStore')
    }

    keyStore = project.keyStore
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = anarchyJar.archivePath
    outputFile = anarchyJar.archivePath
}

build.dependsOn(signLawfulJar, signAnarchyJar)
